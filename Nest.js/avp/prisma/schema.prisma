// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users model
model User {
  id            Int             @id @default(autoincrement())
  name          String
  email         String          @unique
  password      String
  role          Role            @default(STUDENT)
  personalInfo  PersonalInfo?
  address       Address?
  classRoom     ClassRoom?
  classRoomList ClassRoomList[]

  isActive  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("users")
}

enum Role {
  ADMIN
  SECRE
  COORD
  PRECE
  STUDENT
}

model PersonalInfo {
  id            Int     @id @default(autoincrement())
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        Int     @unique
  cpf           String
  rgm           String?
  profResgister String?

  @@map("personal_info")
}

model Address {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int    @unique
  street String
  number String
  city   String
  state  String
  cep    String

  @@map("addresses")
}

// ClassRooms model
model ClassRoom {
  id       Int             @id @default(autoincrement())
  shift    Shift
  grade    Grade
  coord    User?           @relation(fields: [coordId], references: [id], onDelete: SetNull)
  coordId  Int?            @unique @default(dbgenerated("NULL"))
  students ClassRoomList[]

  @@map("class_rooms")
}

enum Shift {
  Manha
  Tarde
  Noite
}

enum Grade {
  SEVEN // 7th grade
  EIGHT // 8th grade
}

model ClassRoomList {
  classRoom   ClassRoom @relation(fields: [classRoomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classRoomId Int
  student     User      @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId   Int

  @@id([classRoomId, studentId])
  @@map("class_room_list")
}
